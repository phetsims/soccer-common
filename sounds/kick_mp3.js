/* eslint-disable */
import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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2XO6LELQLEou6Mhwmk1i5TS1i7mdVgjLVT6WonXhMvGPvfzOxZjzLGWoxCHf5SF79PKgZ0nKT/8I5Qz+qp1f7huqSUJILLRLcQDLTpKJtS3rljpQNQJQFMUYYZVWfVLprofDYEB4ClSNpCMLRb7cgidQI0Zhgq1WNpsOInjuhX8TBv/7YMTqAAyY1yusGHMBnZ0l9YSiXDxedD4DmlBiogyl4niggQzCYMMjMnhxsFfKnfiPDP//9IE0syojLdrdQBXQtFiR4LAh41DUwAIEhwqBDdsDgKcBwO5UqNZOiFyhtEuyrfQM325+U+VUyV5reBxhnGoblw/wRpEhaGeRB7u1a7qzLUWjMJb2SOf4pvA+GqgACDv////XQjaSCcKZRAA6GYoQFJUfKQU6U4xCG8SLCerKVN1zt1AEUrOEosqTh2E/LFNWVhfOpOT0d10Mg5x4VFuMoFQgjLNzARFORcdOWsqYZzFZOqQ9dm//wYkTjAVINDU0OtyRgBpIWAKgWYoCmCisIv/7UMT7gAzE6SusJREBgR3l9YSZ5EO+osgmSpXdADuLnhmGjYKRGPIVj5k4haVcE1BEk7P31GJvMOc+iD/W8h0iIoM0jPyQSzYSfiHLWixM6ax6cIwUr68y1na/ExVxd4YVDkaSDKaTrADYAclFcKCHlRkSWwxsagSf0LfpsjbMvfSPEshx6iiERuVHfToy3PgpCRpiDGMznFFHVKimSno7M5esdv13ZbTLDTwCbWB3VAuD4Pn/6h4dR//9buu11UgUkAAbsBQCTmjGUwOFD87/+1DE9YAMJNEnrKRtQYcY5v2GGbQrcmKxgvE/TAlNn3Za3IlCowBXWRNBgFGZmZoFVf9mX6pMzKpMdJj4xhRKgv+C/GCseioQ1UxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//tQxPGACwDdK6ywbSmFF+W9hiXcVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7UMTyAAtMtyWsJM6BIJGj9YSNyVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVU=';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;